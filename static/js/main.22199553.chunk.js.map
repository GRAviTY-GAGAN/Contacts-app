{"version":3,"sources":["utils/config.js","context/Context.js","pages/AddContact.js","context/action.types.js","components/Contact.js","pages/Contacts.js","layout/Header.js","layout/Footer.js","pages/ViewContact.js","pages/PageNotFound.js","context/reducer.js","App.js","index.js"],"names":["imageConfig","quality","maxWidth","maxHeight","autoRotate","ContactContext","createContext","AddContact","useContext","state","dispatch","contactToUpdate","contactToUpdateKey","history","useHistory","useState","name","setName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","useEffect","picture","imagePicker","e","file","target","files","metadata","contentType","type","readAndCompressImage","resizedImage","firebase","storage","ref","storageRef","uploadTask","child","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","TaskState","PAUSED","console","log","RUNNING","toast","error","getDownloadURL","then","downloadURL","catch","err","addContact","database","v4","set","updateContact","Container","fluid","className","Row","Col","md","Form","onSubmit","preventDefault","payload","key","push","Spinner","color","htmlFor","src","alt","id","accept","multiple","onChange","FormGroup","Input","placeholder","value","check","Label","checked","Button","block","Contact","contact","contactKey","onClick","update","viewSingleContact","remove","Contacts","contacts","isLoading","length","ListGroup","Object","entries","map","ListGroupItem","Header","Navbar","light","NavbarBrand","tag","Link","to","NavbarText","Footer","ViewContact","Card","CardBody","height","width","CardTitle","CardSubtitle","href","PageNotFound","action","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialState","App","useReducer","reducer","getContacts","val","Provider","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22199553.chunk.js","sourcesContent":["//TODO:DONE add firebase configuration and export it\nexport const FirebaseConfig = {\n  apiKey: \"AIzaSyBwIC4OMH4m1gaGr0b5-QQ1N56jCZHgy1Q\",\n  authDomain: \"mygitapp-299ee.firebaseapp.com\",\n  databaseURL: \"https://mygitapp-299ee-default-rtdb.firebaseio.com\",\n  projectId: \"mygitapp-299ee\",\n  storageBucket: \"mygitapp-299ee.appspot.com\",\n  messagingSenderId: \"206213713014\",\n  appId: \"1:206213713014:web:358734131c38d0d8a42357\",\n  measurementId: \"G-7HC8W5K1LL\"\n};\n\n//image configuration\nexport const imageConfig = {\n  quality: 0.2,\n  maxWidth: 800,\n  maxHeight: 600,\n  autoRotate: true\n};\n","//TODO: DONE: Create context: ContactContext\nimport { createContext } from \"react\";\n\nexport const ContactContext = createContext(); ","// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Spinner,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: DONE add image configurations\nimport { imageConfig } from \"../utils/config\";\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async e => {\n    // TODO: upload image and set D-URL to state\n\n    try {\n      const file = e.target.files[0];\n\n      var metadata = {\n        contentType: file.type\n      };\n\n      let resizedImage = await readAndCompressImage(file, imageConfig);\n\n      const storageRef = await firebase.storage().ref();\n      var uploadTask = storageRef\n        .child(\"images/\" + file.name)\n        .put(resizedImage, metadata);\n\n      uploadTask.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        snapshot => {\n          setIsUploading(true);\n          var progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n\n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED:\n              setIsUploading(false);\n              console.log(\"UPloading is paused\");\n              break;\n            case firebase.storage.TaskState.RUNNING:\n              console.log(\"UPloading is in progress...\");\n              break;\n          }\n          if (progress == 100) {\n            setIsUploading(false);\n            toast(\"uploaded\", { type: \"success\" });\n          }\n        },\n        error => {\n          toast(\"something is wrong in state change\", { type: \"error\" });\n        },\n        () => {\n          uploadTask.snapshot.ref\n            .getDownloadURL()\n            .then(downloadURL => {\n              setDownloadUrl(downloadURL);\n            })\n            .catch(err => console.log(err));\n        }\n      );\n    } catch (error) {\n      console.error(error);\n      toast(\"Something went wrong\", { type: \"error\" });\n    }\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    //TODO: add contact method\n    try {\n      firebase\n        .database()\n        .ref(\"contacts/\" + v4())\n        .set({\n          name,\n          email,\n          phoneNumber,\n          address,\n          picture: downloadUrl,\n          star\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    //TODO: update contact method\n    try {\n      firebase\n        .database()\n        .ref(\"contacts/\" + contactToUpdateKey)\n        .set({\n          name,\n          email,\n          phoneNumber,\n          address,\n          picture: downloadUrl,\n          star\n        });\n    } catch (error) {\n      console.log(error);\n      toast(\"Oppss..\", { type: \"error\" });\n    }\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = e => {\n    e.preventDefault();\n    isUpdate ? updateContact() : addContact();\n\n    toast(\"Success\", { type: \"success\" });\n    // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    });\n\n    // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n    history.push(\"/\");\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5\">\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\n          <Form onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              {isUploading ? (\n                <Spinner type=\"grow\" color=\"primary\" />\n              ) : (\n                <div>\n                  <label htmlFor=\"imagepicker\" className=\"\">\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    name=\"image\"\n                    id=\"imagepicker\"\n                    accept=\"image/*\"\n                    multiple={false}\n                    onChange={e => imagePicker(e)}\n                    className=\"hidden\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"number\"\n                id=\"phonenumber\"\n                value={phoneNumber}\n                onChange={e => setPhoneNumber(e.target.value)}\n                placeholder=\"phone number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"area\"\n                id=\"area\"\n                value={address}\n                onChange={e => setAddress(e.target.value)}\n                placeholder=\"address\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    setStar(!star);\n                  }}\n                  checked={star}\n                />{\" \"}\n                <span className=\"text-right\">Mark as Star</span>\n              </Label>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              block\n              className=\"text-uppercase\"\n            >\n              {isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n","//TODO: SET_LOADING, SET_CONTACT,\n// CONTACT_TO_UPDATE, SET_SINGLE_CONTACT\n\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_CONTACT = \"SET_CONTACT\";\nexport const CONTACT_TO_UPDATE = \"CONTACT_TO_UPDATE\";\nexport const SET_SINGLE_CONTACT = \"SET_SINGLE_CONTACT\";","// https://firebase.google.com/docs/database/web/read-and-write?authuser=1#read_data_once\n\nimport React, { useContext } from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\n// icons\nimport { FaRegStar, FaStar } from \"react-icons/fa\";\nimport { MdDelete, MdEdit } from \"react-icons/md\";\n\n//TODO: add firebase\nimport firebase from \"firebase/app\";\n\n// context stuffs\n//TODO:DONE import context and action: update and single_contact\nimport { ContactContext } from \"../context/Context\";\nimport {CONTACT_TO_UPDATE, SET_SINGLE_CONTACT} from '../context/action.types'\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\nimport { type } from \"@testing-library/user-event/dist/type\";\n\nconst Contact = ({ contact, contactKey }) => {\n  //TODO:DONE destructuring dispatch from the context\n  const {dispatch} = useContext(ContactContext)\n\n  // history hooks to get history\n  const history = useHistory();\n\n  // to delete the contact when delete contact is clicked\n  const deleteContact = () => {\n    //TODO: DONE create this method from firebase\n    firebase.database()\n    .ref(`/contacts/${contactKey}`)\n    .remove()\n    .then( () => {\n      toast(\"Deleted successfully\", {type: \"warning\"})\n    })\n    .catch(error => console.log(error))\n  };\n\n  // update the star/important contact ,ie, star it or unstar the single contact\n  const updateImpContact = () => {\n    //TODO:DONE update (star) contact, use contactKey\n    firebase.database()\n    .ref(`/contacts/${contactKey}`)\n    .update(\n      {\n        star: !contact.star\n      },\n      err => {\n        console.log(err);\n      }\n    )\n    .then(() => {\n      toast(\"contact updated\", {type: \"info\"})\n    })\n    .catch(error => console.log(error))\n  };\n\n  // when the update icon/ pen ion is clicked\n  const updateContact = () => {\n    // dispatching one action to update contact\n    //TODO: use dispatch to update\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: contact,\n      key: contactKey\n    })\n\n    // and pushing to the add contact screen\n    history.push(\"/contact/add\");\n  };\n\n  // to view a single contact in the contact/view screen\n  const viewSingleContact = contact => {\n    // setting single contact in state\n    //TODO: use dispatch to view single contact\n    dispatch({\n      type: SET_SINGLE_CONTACT,\n      payload: contact\n    })\n\n    // sending...\n    history.push(\"/contact/view\");\n  };\n\n  return (\n    <>\n      <Row>\n        <Col\n          md=\"1\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <div className=\"icon\" onClick={() => updateImpContact()}>\n            {contact.star ? (\n              <FaStar className=\" text-primary\" />\n            ) : (\n              <FaRegStar className=\" text-info\" />\n            )}\n          </div>\n        </Col>\n        <Col\n          md=\"2\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <img src={contact.picture} alt=\"\" className=\"img-circle profile\" />\n        </Col>\n        <Col md=\"8\" onClick={() => viewSingleContact(contact)}>\n          <div className=\"text-primary\">{contact.name}</div>\n\n          <div className=\"text-secondary\">{contact.phoneNumber}</div>\n          <div className=\"text-secondary\">{contact.email}</div>\n\n          <div className=\"text-info\">{contact.address}</div>\n        </Col>\n        <Col\n          md=\"1\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <MdDelete\n            onClick={() => deleteContact()}\n            color=\"danger\"\n            className=\"text-danger icon\"\n          />\n          <MdEdit\n            className=\"icon text-info ml-2\"\n            onClick={() => updateContact()}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Contact;\n","import React, { useContext } from \"react\";\n\nimport { Container, ListGroup, ListGroupItem, Spinner } from \"reactstrap\";\nimport Contact from \"../components/Contact\";\nimport { MdAdd } from \"react-icons/md\";\nimport { useHistory } from \"react-router-dom\";\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nconst Contacts = () => {\n  const { state, dispatch } = useContext(ContactContext);\n\n  // destructuring contacts and isLoading from state\n  const { contacts, isLoading } = state;\n\n  // history hooks from react router dom to get history\n  const history = useHistory();\n\n  // handle fab icon button click\n  // will set in state of the contact to update and send it to the contact/add route\n  const AddContact = () => {\n    //TODO: use dispatch to send user to add contact screen\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    });\n    history.push(\"/contact/add\");\n  };\n\n  // return loading spinner\n  if (isLoading) {\n    return (\n      <div className=\"Center\">\n        <Spinner color=\"primary\" />\n        <div className=\"text-primary\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Container className=\"mt-4\">\n      {/* TODO: Loop through FIREBASE objects  */}\n      {contacts.length === 0 && !isLoading ? (\n        <div className=\"Center text-large text-primary\">\n          NO Contacts found in firebase\n        </div>\n      ) : (\n        <ListGroup>\n          {Object.entries(contacts).map(([key, value]) => (\n            <ListGroupItem key={key}>\n              <Contact contact={value} contactKey={key} />\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      )}\n      <MdAdd className=\"fab icon \" onClick={AddContact} />\n    </Container>\n  );\n};\n\nexport default Contacts;\n","//TODO:DONE set NavbarBrand to go to home page and export Header\n\nimport React from \"react\";\nimport { Navbar, NavbarBrand, NavbarText } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <Navbar color=\"info\" light>\n      <NavbarBrand tag={Link} to='/' className=\"text-white\">Contact App</NavbarBrand>\n      <NavbarText className=\"text-white float-right\">\n        A simple Contact app\n      </NavbarText>\n    </Navbar>\n  );\n};\n\nexport default Header;","//TODO:DONE Export the Footer\nimport React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-info text-center pt-3 pb-2 mt-5 sticky-bottom\">\n      A simple Contact App\n    </footer>\n  );\n};\n\nexport default Footer;","import React, { useContext } from \"react\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle\n} from \"reactstrap\";\nimport { FaEnvelope, FaMapMarkerAlt, FaPhone } from \"react-icons/fa\";\nimport { ContactContext } from \"../context/Context\";\n\nconst ViewContact = () => {\n  const { state } = useContext(ContactContext);\n  // destructuring contact from the state\n  // and rendering it in state\n\n  const { contact } = state;\n\n  return (\n    <Container>\n      <Row className=\"mt-5 mb-5\">\n        <Col md=\"5\" className=\"offset-md-3\">\n          <Card className=\"pt-3 pb-5\">\n            <CardBody className=\"text-center \">\n              <img\n                height=\"150\"\n                width=\"150\"\n                className=\"cardImg profile border-danger\"\n                src={contact?.picture}\n              />\n              <CardTitle className=\"text-primary mt-3\">\n                <h1>{contact?.name}</h1>\n              </CardTitle>\n              <CardSubtitle>\n                <h3>\n                  <FaPhone className=\"mr-2\" />\n                  {contact?.phoneNumber}\n                </h3>\n              </CardSubtitle>\n              <a\n                className=\"btn btn-primary btn-block\"\n                target=\"_blank\"\n                href={`mailto:{contact?.email}`}\n              >\n                <FaEnvelope className=\"icon mr-2\" />\n                {contact?.email}\n              </a>\n\n              <a\n                className=\"btn btn-primary btn-block\"\n                target=\"_blank\"\n                //TODO: add google maps\n                href={`https://www.google.com/maps/place/${contact?.address}`}\n              >\n                <FaMapMarkerAlt className=\"icon mr-2\" />\n                {contact?.address}\n              </a>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ViewContact;\n","import React from \"react\";\n\nconst PageNotFound = () => {\n  return (\n    <div>\n      <h1>404 page not found</h1>\n    </div>\n  );\n};\n\n//FIXME: missing keywords\nexport default PageNotFound;\n","//TODO: DONE create contact using all actions\n\nimport {\n  SET_CONTACT,\n  SET_LOADING,\n  CONTACT_TO_UPDATE,\n  SET_SINGLE_CONTACT\n} from \"./action.types\";\n\n//TODO: DONE use switch case\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n      return action.payload == null\n       ? {...state, contacts: []}\n       : {...state, contacts: action.payload}\n    case SET_LOADING:\n      return {...state, isLoading: action.payload}\n    case CONTACT_TO_UPDATE:\n      return {...state, \n        contactToUpdate: action.payload, \n        contactToUpdateKey: action.key}\n    case SET_SINGLE_CONTACT:\n      return {\n        ...state, \n        contact: action.payload\n      }\n    default:\n      return state;\n  }\n}","import React, { useReducer, useEffect } from \"react\";\n\nimport { Container, Col, Row } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// firebase stuffs\n//TODO: DONE import firebase config and firebase database\nimport { FirebaseConfig } from \"./utils/config\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport 'firebase/storage';\n\n// components\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\n// context api stuffs\n//TODO: DONE  import reducers and contexts\nimport reducer from \"./context/reducer\";\nimport { ContactContext } from \"./context/Context\";\nimport {SET_CONTACT, SET_LOADING }  from './context/action.types';\n\n//initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n//TODO:DONE  initialize FIREBASE\nfirebase.initializeApp(FirebaseConfig);\n\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from firebase and set it on state contacts array\n  const getContacts = async () => {\n    // TODO: load existing data (get all the contacts from the firebase)\n    dispatch({\n      type: SET_LOADING,\n      payload: true\n    })\n\n    const contactsRef = await firebase.database().ref('/contacts');\n    contactsRef.on('value', snapshot => {\n      dispatch({\n        type: SET_CONTACT,\n        payload: snapshot.val()\n      });\n      dispatch({\n        type: SET_LOADING,\n        payload: false\n      })\n    })\n\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    getContacts();\n  }, []);\n\n  return (\n    <Router>\n      <ContactContext.Provider value={{ state , dispatch }}>\n        <ToastContainer />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n\n        <Footer />\n      </ContactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}